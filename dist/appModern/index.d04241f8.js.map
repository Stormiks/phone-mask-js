{"mappings":"YAWA,SAAAA,EAAgCC,UACvBA,GAAKA,EAAEC,WAAaD,EAAEE,QAAUF,iBCZzC,SAAyBG,EAAKC,EAAKC,UAC7BD,KAAOD,EACTG,OAAOC,eAAeJ,EAAKC,EAAAA,CACzBC,MAAOA,EACPG,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZP,EAAIC,GAAOC,EAGNF,KAIM,QAAAQ,EAAyDC,EAAbX,WAAa,kCChBxE,SAAkCY,EAAUC,UACtCA,EAAWC,IACND,EAAWC,IAAIC,KAAKH,GAGtBC,EAAWT,SAIL,QAAAY,EAAyDC,EAAbjB,WAAa,WCTpEkB,EAAAA,WCAJ,SAAsCN,EAAUO,EAAYC,OACrDD,EAAWE,IAAIT,aACRU,UAAU,gBAAkBF,EAAS,yCAG1CD,EAAWL,IAAIF,MAIT,QAAAW,EAAyDC,EAAbxB,WAAa,SDPpEyB,EAAAA,MAEJ,SAA+Bb,EAAUO,OACnCN,EAAaY,EAA4Bb,EAAUO,EAAY,cAC5DD,EAAwBN,EAAUC,MAI5B,QAAAa,EAAyDC,EAAb3B,WAAa,kCEVxE,SAAkCY,EAAUC,EAAYT,MAClDS,EAAWe,IACbf,EAAWe,IAAIb,KAAKH,EAAUR,YAEzBS,EAAWJ,mBACJa,UAAU,4CAGtBT,EAAWT,MAAQA,MAKR,QAAAyB,EAAyDC,EAAb9B,WAAa,SCbpE+B,EAAAA,EAEAC,EAAAA,MAEJ,SAA+BpB,EAAUO,EAAYf,OAC/CS,EAAamB,EAA4BpB,EAAUO,EAAY,cACnEY,EAAwBnB,EAAUC,EAAYT,GACvCA,KAIM,QAAA6B,EAAyDC,EAAblC,WAAa,6lCCRxE,MAAAmC,EAQIC,YAAYC,EAAAA,mCAPK,QAAS,OAAQ,UAAW,QAAS,4EAEvC,sCACQ,4CAPX,sCACA,SAWRC,KAAKC,gBAAiBlC,OAAOmC,UAAUC,eAAe1B,KAAKsB,EAAS,SAAUA,EAAQK,KACtFJ,KAAKK,aAAetC,OAAOmC,UAAUC,eAAe1B,KAAKsB,EAAS,UAAYA,EAAQO,OAASN,KAAKK,aACpGL,KAAKO,QAAUxC,OAAOmC,UAAUC,eAAe1B,KAAKsB,EAAS,UAAYA,EAAQS,OAASR,KAAKO,QAC/FP,KAAKS,oBAAsB1C,OAAOmC,UAAUC,eAAe1B,KAAKsB,EAAS,oBAAsBA,EAAQW,iBAAmBV,KAAKS,oBAE3HT,KAAKC,gBACLD,KAAKW,sBAGDC,EAAAA,MACRZ,KAAAa,EAAgBD,0BAITZ,KAAAa,+BAIAb,KAAAc,oBAGMC,EAAAA,MACbf,KAAAc,EAAqBC,sCAIdf,KAAAgB,2BAGaC,KACpBjB,KAAAgB,EAA4BC,4BAIrBjB,KAAAkB,GAGXP,UACSX,KAAKO,QAAQY,SACdnB,KAAKO,QAAUa,SAASC,iBAAiBrB,KAAKS,sBAG9CT,KAAKO,QAAQY,QACbnB,KAAKsB,4BAGbC,qBAAqBC,UACVA,EAAO1D,MAAM2D,QAAQzB,KAAK0B,UAAW,IAGhDC,eAAeC,SACLC,EAAcD,EAAEE,OAAOhE,MAAM2D,QAAQzB,KAAK0B,UAAW,IAEzC,IAAdE,EAAEG,SAAwC,IAAvBF,EAAYV,SAC/BS,EAAEE,OAAOhE,MAAQ,IAIzBkE,aAAaJ,GACMA,EAAEE,OAEVG,YAAc,qBAGzBC,YAAYN,GACOA,EAAEE,OAEVG,YAAc,UAGzBE,aAAaP,SACHJ,EAASI,EAAEE,WACbM,EAAoBpC,KAAKuB,qBAAqBC,SAC5Ca,EAAiBb,EAAOa,mBAC1BC,EAAsB,OAErBF,EAAAA,OAA0BZ,EAAO1D,MAAQ,MAE1C0D,EAAO1D,MAAMqD,QAAUkB,OAQtB,IAAK,IAAK,KAAKE,SAASH,EAAkB,IAAA,CACd,MAAzBA,EAAkB,KAAYA,EAAAA,IAAwBA,SAEtDI,EAAyC,MAAzBJ,EAAkB,GAAc,IAAM,KAE1DE,EAAsBd,EAAO1D,MAAAA,GAAW0E,KAEpCJ,EAAkBjB,OAAS,IAC3BmB,GAAAA,IAA2BF,EAAkBK,UAAU,EAAG,MAE1DL,EAAkBjB,QAAU,IAC5BmB,GAAAA,KAA4BF,EAAkBK,UAAU,EAAG,MAE3DL,EAAkBjB,QAAU,IAC5BmB,GAAAA,IAA0BF,EAAkBK,UAAU,EAAG,MAEzDL,EAAkBjB,QAAU,KAC5BmB,GAAAA,IAA2BF,EAAkBK,UAAU,EAAG,YAG9DH,EAAAA,IAA0BF,EAAkBK,UAAU,EAAG,MAG7DjB,EAAO1D,MAAQwE,OA9BPV,EAAEc,MAAQ1C,KAAK0B,UAAUiB,KAAKf,EAAEc,QAChClB,EAAO1D,MAAQsE,GAgC3BQ,aAAahB,SACHiB,EAASjB,EAAEE,OACXM,EAAoBb,qBAAqBsB,GACzCC,EAASlB,EAAEmB,eAAiBC,OAAOD,iBAErCD,EAAAA,OACMG,EAAaH,EAAOI,QAAQ,WAE9BlD,KAAK0B,UAAUiB,KAAKM,eACpBJ,EAAO/E,MAAQsE,IAM3Be,oBAAoBC,SAGVC,EAAAA,UAFyBD,EAAUE,MAAM,EAAE,GAAGC,gBAC9BH,EAAUE,MAAM,aAGjCtD,KAAKqD,IAGCrD,KAAKqD,GAIpB/B,gCAC8Bf,MAALP,KAAKO,+CAAfiD,EAAAA,EAAAA,SACa,QAAhBA,EAAOC,KAAS,WAEKpD,MAALL,KAAKK,oDAAdqD,EAAAA,EAAAA,MACDC,EAAgB3D,KAAKmD,oBAAoBO,GAElB,mBAAlBC,GACPH,EAAOI,iBAAiBF,EAAOC,EAAcE,KAAK7D,OAAO,oEC7J7EoB,SAASwC,iBAAiB,oBAAoB,iBACpCE,EAAAA,IAAAA,EACNC,QAAQC,KAAK,iBAAkBF,EAAUG,UACzC7C,SAAS8C,cAAc,SAASC","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./node_modules/@babel/runtime/helpers/defineProperty.js","./node_modules/@babel/runtime/helpers/classApplyDescriptorGet.js","./node_modules/@babel/runtime/helpers/classPrivateFieldGet.js","./node_modules/@babel/runtime/helpers/classExtractFieldDescriptor.js","./node_modules/@babel/runtime/helpers/classApplyDescriptorSet.js","./node_modules/@babel/runtime/helpers/classPrivateFieldSet.js","./src/plugin/index.js","./src/script.js"],"sourcesContent":["var $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$export(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n\n  return descriptor.value;\n}\n\nmodule.exports = _classApplyDescriptorGet;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var classApplyDescriptorGet = require(\"./classApplyDescriptorGet.js\");\n\nvar classExtractFieldDescriptor = require(\"./classExtractFieldDescriptor.js\");\n\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return classApplyDescriptorGet(receiver, descriptor);\n}\n\nmodule.exports = _classPrivateFieldGet;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n\n  return privateMap.get(receiver);\n}\n\nmodule.exports = _classExtractFieldDescriptor;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n\n    descriptor.value = value;\n  }\n}\n\nmodule.exports = _classApplyDescriptorSet;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var classApplyDescriptorSet = require(\"./classApplyDescriptorSet.js\");\n\nvar classExtractFieldDescriptor = require(\"./classExtractFieldDescriptor.js\");\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\n\nmodule.exports = _classPrivateFieldSet;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","const appName = \"Input Phone Mask\"\r\nconst version = \"1.0.0\"\r\n\r\nclass InputTelephon {\r\n    #_eventsInput = ['focus', 'blur', 'keydown', 'input', 'paste']\r\n    #_inputs = []\r\n    #_regExpMask = /\\D/g\r\n    #_searchInputPattern = 'input[data-tel-input]'\r\n    _libName = appName\r\n    _version = version\r\n\r\n    constructor(options = {}) {\r\n        this.isInitInstance = Object.prototype.hasOwnProperty.call(options, 'init') ? options.init : true\r\n        this._eventsInput = Object.prototype.hasOwnProperty.call(options, 'events') ? options.events : this._eventsInput\r\n        this._inputs = Object.prototype.hasOwnProperty.call(options, 'fields') ? options.fields : this._inputs\r\n        this._searchInputPattern = Object.prototype.hasOwnProperty.call(options, 'patternNodeInpit') ? options.patternNodeInpit : this._searchInputPattern\r\n\r\n        if (this.isInitInstance)\r\n            this.install()\r\n    }\r\n\r\n    set _inputs($nodes = []) {\r\n        this.#_inputs = $nodes\r\n    }\r\n\r\n    get _inputs() {\r\n        return this.#_inputs\r\n    }\r\n\r\n    get _eventsInput() {\r\n        return this.#_eventsInput\r\n    }\r\n\r\n    set _eventsInput(arr = []) {\r\n        this.#_eventsInput = arr\r\n    }\r\n\r\n    get _searchInputPattern() {\r\n        return this.#_searchInputPattern\r\n    }\r\n\r\n    set _searchInputPattern(patternStr) {\r\n        this.#_searchInputPattern = patternStr\r\n    }\r\n\r\n    get maskField() {\r\n        return this.#_regExpMask\r\n    }\r\n\r\n    install() {\r\n        if (!this._inputs.length) {\r\n            this._inputs = document.querySelectorAll(this._searchInputPattern)\r\n        }\r\n\r\n        if (this._inputs.length)\r\n            this.subscribeEventsOnTheInput()\r\n    }\r\n\r\n    getInputNumbersValue($field) {\r\n        return $field.value.replace(this.maskField, '');\r\n    }\r\n\r\n    handlerKeydown(e) {\r\n        const $fieldValue = e.target.value.replace(this.maskField, '');\r\n\r\n        if (e.keyCode === 8 && $fieldValue.length === 1) {\r\n            e.target.value = \"\";\r\n        }\r\n    }\r\n\r\n    handlerFocus(e) {\r\n        const $field = e.target;\r\n\r\n        $field.placeholder = '+7 (999) 999-99-99'\r\n    }\r\n\r\n    handlerBlur(e) {\r\n        const $field = e.target;\r\n\r\n        $field.placeholder = 'Телефон'\r\n    }\r\n\r\n    handlerInput(e) {\r\n        const $field = e.target;\r\n        let inputNumbersValue = this.getInputNumbersValue($field);\r\n        const selectionStart = $field.selectionStart;\r\n        let formattedInputValue = \"\";\r\n\r\n        if (!inputNumbersValue) return $field.value = \"\";\r\n\r\n        if ($field.value.length != selectionStart) {\r\n            if (e.data && this.maskField.test(e.data)) {\r\n                $field.value = inputNumbersValue;\r\n            }\r\n            return;\r\n        }\r\n\r\n\r\n        if ([\"7\", \"8\", \"9\"].includes(inputNumbersValue[0])) {\r\n            if (inputNumbersValue[0] === \"9\") inputNumbersValue = `7${inputNumbersValue}`;\r\n\r\n            let firstSymbols = (inputNumbersValue[0] === \"8\") ? \"8\" : \"+7\";\r\n\r\n            formattedInputValue = $field.value = `${firstSymbols} `;\r\n\r\n            if (inputNumbersValue.length > 1) {\r\n                formattedInputValue += `(${inputNumbersValue.substring(1, 4)}`;\r\n            }\r\n            if (inputNumbersValue.length >= 5) {\r\n                formattedInputValue += `) ${inputNumbersValue.substring(4, 7)}`;\r\n            }\r\n            if (inputNumbersValue.length >= 8) {\r\n                formattedInputValue +=`-${inputNumbersValue.substring(7, 9)}`;\r\n            }\r\n            if (inputNumbersValue.length >= 10) {\r\n                formattedInputValue += `-${inputNumbersValue.substring(9, 11)}`;\r\n            }\r\n        } else {\r\n            formattedInputValue = `+${inputNumbersValue.substring(0, 16)}`;\r\n        }\r\n\r\n        $field.value = formattedInputValue;\r\n    }\r\n\r\n    handlerPaste(e) {\r\n        const $filed = e.target;\r\n        const inputNumbersValue = getInputNumbersValue($filed);\r\n        const pasted = e.clipboardData || window.clipboardData;\r\n\r\n        if (pasted) {\r\n            const pastedText = pasted.getData('Text');\r\n\r\n            if (this.maskField.test(pastedText)) {\r\n                $filed.value = inputNumbersValue;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    getMethodAtInstance(nameEvent) {\r\n        const formatFirstSymbolOfStr = nameEvent.slice(0,1).toUpperCase()\r\n        const restOfTheLine = nameEvent.slice(1)\r\n        const nameMethodAtClass = `handler${formatFirstSymbolOfStr}${restOfTheLine}`\r\n        \r\n        if (!this[nameMethodAtClass]) {\r\n            return false\r\n        } else {\r\n            return this[nameMethodAtClass]\r\n        }\r\n    }\r\n\r\n    subscribeEventsOnTheInput() {\r\n        for (const $input of this._inputs) {\r\n            if ($input.type !== 'tel') return\r\n\r\n            for (const event of this._eventsInput) {\r\n                const handlerMethod = this.getMethodAtInstance(event)\r\n\r\n                if (typeof handlerMethod === 'function')\r\n                    $input.addEventListener(event, handlerMethod.bind(this), false)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default InputTelephon","import instInputMask from './plugin/index.js'\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function(){\r\n    const InputMask = new instInputMask();\r\n    console.info('Install to lib', InputMask._libName)\r\n    document.querySelector('input').focus();\r\n})"],"names":["$parcel$interopDefault","a","__esModule","default","obj","key","value","Object","defineProperty","enumerable","configurable","writable","$7e43a9d81b1b34b4f7e4aed8e8264c76$export$default","$7e43a9d81b1b34b4f7e4aed8e8264c76$exports","receiver","descriptor","get","call","$8f8555bcf54a3ef64a863bb93d695273$export$default","$8f8555bcf54a3ef64a863bb93d695273$exports","$07c84885601b613b5aa7274e0e5099f2$var$classApplyDescriptorGet","privateMap","action","has","TypeError","$dba454a805fd3470277c5e8468cc93d3$export$default","$dba454a805fd3470277c5e8468cc93d3$exports","$07c84885601b613b5aa7274e0e5099f2$var$classExtractFieldDescriptor","$07c84885601b613b5aa7274e0e5099f2$export$default","$07c84885601b613b5aa7274e0e5099f2$exports","set","$7971999e1ff5d6fa82f7aaba3a42be17$export$default","$7971999e1ff5d6fa82f7aaba3a42be17$exports","$19ed50f031667eddac04f549d4854a8d$var$classApplyDescriptorSet","$19ed50f031667eddac04f549d4854a8d$var$classExtractFieldDescriptor","$19ed50f031667eddac04f549d4854a8d$export$default","$19ed50f031667eddac04f549d4854a8d$exports","$e3ba22ecf9ffb0a191886ccf63dd2035$export$default","constructor","options","this","isInitInstance","prototype","hasOwnProperty","init","_eventsInput","events","_inputs","fields","_searchInputPattern","patternNodeInpit","install","$nodes","$e3ba22ecf9ffb0a191886ccf63dd2035$var$_inputs","$e3ba22ecf9ffb0a191886ccf63dd2035$var$_eventsInput","arr","$e3ba22ecf9ffb0a191886ccf63dd2035$var$_searchInputPattern","patternStr","$e3ba22ecf9ffb0a191886ccf63dd2035$var$_regExpMask","length","document","querySelectorAll","subscribeEventsOnTheInput","getInputNumbersValue","$field","replace","maskField","handlerKeydown","e","$fieldValue","target","keyCode","handlerFocus","placeholder","handlerBlur","handlerInput","inputNumbersValue","selectionStart","formattedInputValue","includes","firstSymbols","substring","data","test","handlerPaste","$filed","pasted","clipboardData","window","pastedText","getData","getMethodAtInstance","nameEvent","nameMethodAtClass","slice","toUpperCase","$input","type","event","handlerMethod","addEventListener","bind","InputMask","console","info","_libName","querySelector","focus"],"version":3,"file":"index.d04241f8.js.map"}